// Code generated by protoc-gen-go.
// source: material.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	material.proto
	model.proto

It has these top-level messages:
	Material
	Mesh
	Model
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Material_Cullface int32

const (
	Material_CULL_BACK  Material_Cullface = 0
	Material_CULL_FRONT Material_Cullface = 1
	Material_CULL_BOTH  Material_Cullface = 2
)

var Material_Cullface_name = map[int32]string{
	0: "CULL_BACK",
	1: "CULL_FRONT",
	2: "CULL_BOTH",
}
var Material_Cullface_value = map[string]int32{
	"CULL_BACK":  0,
	"CULL_FRONT": 1,
	"CULL_BOTH":  2,
}

func (x Material_Cullface) String() string {
	return proto.EnumName(Material_Cullface_name, int32(x))
}
func (Material_Cullface) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Material_BlendMode int32

const (
	Material_BLEND_SRC_ALPHA           Material_BlendMode = 0
	Material_BLEND_ONE_MINUS_SRC_ALPHA Material_BlendMode = 1
	Material_BLEND_ONE                 Material_BlendMode = 2
)

var Material_BlendMode_name = map[int32]string{
	0: "BLEND_SRC_ALPHA",
	1: "BLEND_ONE_MINUS_SRC_ALPHA",
	2: "BLEND_ONE",
}
var Material_BlendMode_value = map[string]int32{
	"BLEND_SRC_ALPHA":           0,
	"BLEND_ONE_MINUS_SRC_ALPHA": 1,
	"BLEND_ONE":                 2,
}

func (x Material_BlendMode) String() string {
	return proto.EnumName(Material_BlendMode_name, int32(x))
}
func (Material_BlendMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Material_BlendEquation int32

const (
	Material_BLEND_FUNC_ADD Material_BlendEquation = 0
	Material_BLEND_FUNC_MAX Material_BlendEquation = 1
)

var Material_BlendEquation_name = map[int32]string{
	0: "BLEND_FUNC_ADD",
	1: "BLEND_FUNC_MAX",
}
var Material_BlendEquation_value = map[string]int32{
	"BLEND_FUNC_ADD": 0,
	"BLEND_FUNC_MAX": 1,
}

func (x Material_BlendEquation) String() string {
	return proto.EnumName(Material_BlendEquation_name, int32(x))
}
func (Material_BlendEquation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type Material_DepthFunc int32

const (
	Material_DEPTH_LESS_EQUAL Material_DepthFunc = 0
	Material_DEPTH_LESS       Material_DepthFunc = 1
	Material_DEPTH_EQUAL      Material_DepthFunc = 2
)

var Material_DepthFunc_name = map[int32]string{
	0: "DEPTH_LESS_EQUAL",
	1: "DEPTH_LESS",
	2: "DEPTH_EQUAL",
}
var Material_DepthFunc_value = map[string]int32{
	"DEPTH_LESS_EQUAL": 0,
	"DEPTH_LESS":       1,
	"DEPTH_EQUAL":      2,
}

func (x Material_DepthFunc) String() string {
	return proto.EnumName(Material_DepthFunc_name, int32(x))
}
func (Material_DepthFunc) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

type Material struct {
	Name          string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ProgramName   string                 `protobuf:"bytes,2,opt,name=programName" json:"programName,omitempty"`
	Culling       bool                   `protobuf:"varint,3,opt,name=culling" json:"culling,omitempty"`
	CullFace      Material_Cullface      `protobuf:"varint,4,opt,name=cullFace,enum=protos.Material_Cullface" json:"cullFace,omitempty"`
	Blending      bool                   `protobuf:"varint,5,opt,name=blending" json:"blending,omitempty"`
	BlendSrcMode  Material_BlendMode     `protobuf:"varint,6,opt,name=blend_src_mode,json=blendSrcMode,enum=protos.Material_BlendMode" json:"blend_src_mode,omitempty"`
	BlendDstMode  Material_BlendMode     `protobuf:"varint,7,opt,name=blend_dst_mode,json=blendDstMode,enum=protos.Material_BlendMode" json:"blend_dst_mode,omitempty"`
	BlendEquation Material_BlendEquation `protobuf:"varint,8,opt,name=blend_equation,json=blendEquation,enum=protos.Material_BlendEquation" json:"blend_equation,omitempty"`
	DepthTest     bool                   `protobuf:"varint,9,opt,name=depth_test,json=depthTest" json:"depth_test,omitempty"`
	DepthWrite    bool                   `protobuf:"varint,10,opt,name=depth_write,json=depthWrite" json:"depth_write,omitempty"`
	DepthFunc     Material_DepthFunc     `protobuf:"varint,11,opt,name=depth_func,json=depthFunc,enum=protos.Material_DepthFunc" json:"depth_func,omitempty"`
	ColorWrite    bool                   `protobuf:"varint,12,opt,name=color_write,json=colorWrite" json:"color_write,omitempty"`
	ScissorTest   bool                   `protobuf:"varint,13,opt,name=scissor_test,json=scissorTest" json:"scissor_test,omitempty"`
}

func (m *Material) Reset()                    { *m = Material{} }
func (m *Material) String() string            { return proto.CompactTextString(m) }
func (*Material) ProtoMessage()               {}
func (*Material) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Material)(nil), "protos.Material")
	proto.RegisterEnum("protos.Material_Cullface", Material_Cullface_name, Material_Cullface_value)
	proto.RegisterEnum("protos.Material_BlendMode", Material_BlendMode_name, Material_BlendMode_value)
	proto.RegisterEnum("protos.Material_BlendEquation", Material_BlendEquation_name, Material_BlendEquation_value)
	proto.RegisterEnum("protos.Material_DepthFunc", Material_DepthFunc_name, Material_DepthFunc_value)
}

func init() { proto.RegisterFile("material.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0x4d, 0x8f, 0x93, 0x40,
	0x18, 0xc7, 0x4b, 0x5d, 0xbb, 0xf0, 0xd0, 0xb2, 0x64, 0xf4, 0xc0, 0x6e, 0xb2, 0x5a, 0x39, 0xf5,
	0xd4, 0x83, 0xc6, 0xa8, 0x37, 0x29, 0xd0, 0xd4, 0x48, 0xe9, 0x0a, 0x6d, 0xf4, 0x36, 0xa1, 0x30,
	0xbb, 0x92, 0x50, 0xa8, 0xcc, 0x10, 0xbf, 0x9d, 0x9f, 0xcd, 0xcc, 0x0c, 0xd0, 0xfa, 0x96, 0x78,
	0xea, 0xf3, 0x7f, 0x99, 0xdf, 0xbc, 0x34, 0x80, 0x71, 0x48, 0x18, 0xa9, 0xf3, 0xa4, 0x98, 0x1f,
	0xeb, 0x8a, 0x55, 0x68, 0x24, 0x7e, 0xa8, 0xfd, 0x63, 0x04, 0xea, 0xba, 0x8d, 0x10, 0x82, 0x8b,
	0x32, 0x39, 0x10, 0x4b, 0x99, 0x2a, 0x33, 0x2d, 0x12, 0x33, 0x9a, 0x82, 0x7e, 0xac, 0xab, 0x87,
	0x3a, 0x39, 0x84, 0x3c, 0x1a, 0x8a, 0xe8, 0xdc, 0x42, 0x16, 0x5c, 0xa6, 0x4d, 0x51, 0xe4, 0xe5,
	0x83, 0xf5, 0x68, 0xaa, 0xcc, 0xd4, 0xa8, 0x93, 0xe8, 0x35, 0xa8, 0x7c, 0x5c, 0x26, 0x29, 0xb1,
	0x2e, 0xa6, 0xca, 0xcc, 0x78, 0x79, 0x2d, 0xb7, 0xa7, 0xf3, 0x6e, 0xcf, 0xb9, 0xdb, 0x14, 0xc5,
	0x7d, 0x92, 0x92, 0xa8, 0xaf, 0xa2, 0x1b, 0x50, 0xf7, 0x05, 0x29, 0x33, 0x4e, 0x7c, 0x2c, 0x88,
	0xbd, 0x46, 0xef, 0xc1, 0x10, 0x33, 0xa6, 0x75, 0x8a, 0x0f, 0x55, 0x46, 0xac, 0x91, 0x00, 0xdf,
	0xfc, 0x01, 0x5e, 0xf0, 0xda, 0xba, 0xca, 0x48, 0x34, 0x16, 0x2b, 0xe2, 0x3a, 0xe5, 0xea, 0x44,
	0xc8, 0x28, 0x93, 0x84, 0xcb, 0xff, 0x24, 0x78, 0x94, 0x09, 0x82, 0xdf, 0x11, 0xc8, 0xb7, 0x26,
	0x61, 0x79, 0x55, 0x5a, 0xaa, 0x20, 0x3c, 0xfb, 0x3b, 0xc1, 0x6f, 0x5b, 0xd1, 0x64, 0x7f, 0x2e,
	0xd1, 0x2d, 0x40, 0x46, 0x8e, 0xec, 0x2b, 0x66, 0x84, 0x32, 0x4b, 0x13, 0x17, 0xd5, 0x84, 0xb3,
	0x25, 0x94, 0xa1, 0xe7, 0xa0, 0xcb, 0xf8, 0x7b, 0x9d, 0x33, 0x62, 0x81, 0xc8, 0xe5, 0x8a, 0xcf,
	0xdc, 0x41, 0xef, 0xba, 0xf5, 0xf7, 0x4d, 0x99, 0x5a, 0xfa, 0x3f, 0x2e, 0xe1, 0xf1, 0xca, 0xb2,
	0x29, 0xd3, 0x96, 0xcd, 0x47, 0xce, 0x4e, 0xab, 0xa2, 0xaa, 0x5b, 0xf6, 0x58, 0xb2, 0x85, 0x25,
	0xd9, 0x2f, 0x60, 0x4c, 0xd3, 0x9c, 0xd2, 0xaa, 0x96, 0xa7, 0x9b, 0x88, 0x86, 0xde, 0x7a, 0xfc,
	0x7c, 0xf6, 0x5b, 0x50, 0xbb, 0xff, 0x0e, 0x4d, 0x40, 0x73, 0x77, 0x41, 0x80, 0x17, 0x8e, 0xfb,
	0xd1, 0x1c, 0x20, 0x03, 0x40, 0xc8, 0x65, 0xb4, 0x09, 0xb7, 0xa6, 0x72, 0x8a, 0x37, 0xdb, 0x95,
	0x39, 0xb4, 0x43, 0xd0, 0xfa, 0xa7, 0x45, 0x4f, 0xe0, 0x6a, 0x11, 0xf8, 0xa1, 0x87, 0xe3, 0xc8,
	0xc5, 0x4e, 0x70, 0xb7, 0x72, 0xcc, 0x01, 0xba, 0x85, 0x6b, 0x69, 0x6e, 0x42, 0x1f, 0xaf, 0x3f,
	0x84, 0xbb, 0xf8, 0x2c, 0x16, 0xbc, 0x3e, 0x36, 0x87, 0xf6, 0x1b, 0x98, 0xfc, 0xf2, 0xd0, 0x08,
	0x81, 0x21, 0xf3, 0xe5, 0x2e, 0x74, 0xb1, 0xe3, 0x79, 0xe6, 0xe0, 0x37, 0x6f, 0xed, 0x7c, 0x31,
	0x15, 0x7b, 0x01, 0x5a, 0xff, 0x3c, 0xe8, 0x29, 0x98, 0x9e, 0x7f, 0xb7, 0x5d, 0xe1, 0xc0, 0x8f,
	0x63, 0xec, 0x7f, 0xda, 0x39, 0x81, 0xbc, 0xca, 0xc9, 0x35, 0x15, 0x74, 0x05, 0xba, 0xd4, 0xb2,
	0x30, 0xdc, 0xcb, 0x0f, 0xe9, 0xd5, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xdf, 0xae, 0x68,
	0x61, 0x03, 0x00, 0x00,
}
