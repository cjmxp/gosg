// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class Mesh;
class Model;

// ===================================================================

class Mesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.Mesh) */ {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh& default_instance();

  void Swap(Mesh* other);

  // implements Message ----------------------------------------------

  inline Mesh* New() const { return New(NULL); }

  Mesh* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes indices = 1;
  void clear_indices();
  static const int kIndicesFieldNumber = 1;
  const ::std::string& indices() const;
  void set_indices(const ::std::string& value);
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  ::std::string* mutable_indices();
  ::std::string* release_indices();
  void set_allocated_indices(::std::string* indices);

  // optional bytes positions = 2;
  void clear_positions();
  static const int kPositionsFieldNumber = 2;
  const ::std::string& positions() const;
  void set_positions(const ::std::string& value);
  void set_positions(const char* value);
  void set_positions(const void* value, size_t size);
  ::std::string* mutable_positions();
  ::std::string* release_positions();
  void set_allocated_positions(::std::string* positions);

  // optional bytes normals = 3;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  const ::std::string& normals() const;
  void set_normals(const ::std::string& value);
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  ::std::string* mutable_normals();
  ::std::string* release_normals();
  void set_allocated_normals(::std::string* normals);

  // optional bytes tangents = 4;
  void clear_tangents();
  static const int kTangentsFieldNumber = 4;
  const ::std::string& tangents() const;
  void set_tangents(const ::std::string& value);
  void set_tangents(const char* value);
  void set_tangents(const void* value, size_t size);
  ::std::string* mutable_tangents();
  ::std::string* release_tangents();
  void set_allocated_tangents(::std::string* tangents);

  // optional bytes bitangents = 5;
  void clear_bitangents();
  static const int kBitangentsFieldNumber = 5;
  const ::std::string& bitangents() const;
  void set_bitangents(const ::std::string& value);
  void set_bitangents(const char* value);
  void set_bitangents(const void* value, size_t size);
  ::std::string* mutable_bitangents();
  ::std::string* release_bitangents();
  void set_allocated_bitangents(::std::string* bitangents);

  // optional bytes tcoords = 6;
  void clear_tcoords();
  static const int kTcoordsFieldNumber = 6;
  const ::std::string& tcoords() const;
  void set_tcoords(const ::std::string& value);
  void set_tcoords(const char* value);
  void set_tcoords(const void* value, size_t size);
  ::std::string* mutable_tcoords();
  ::std::string* release_tcoords();
  void set_allocated_tcoords(::std::string* tcoords);

  // optional string material = 9;
  void clear_material();
  static const int kMaterialFieldNumber = 9;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // optional bytes ambient_color = 10;
  void clear_ambient_color();
  static const int kAmbientColorFieldNumber = 10;
  const ::std::string& ambient_color() const;
  void set_ambient_color(const ::std::string& value);
  void set_ambient_color(const char* value);
  void set_ambient_color(const void* value, size_t size);
  ::std::string* mutable_ambient_color();
  ::std::string* release_ambient_color();
  void set_allocated_ambient_color(::std::string* ambient_color);

  // optional bytes diffuse_color = 11;
  void clear_diffuse_color();
  static const int kDiffuseColorFieldNumber = 11;
  const ::std::string& diffuse_color() const;
  void set_diffuse_color(const ::std::string& value);
  void set_diffuse_color(const char* value);
  void set_diffuse_color(const void* value, size_t size);
  ::std::string* mutable_diffuse_color();
  ::std::string* release_diffuse_color();
  void set_allocated_diffuse_color(::std::string* diffuse_color);

  // optional bytes specular_color = 12;
  void clear_specular_color();
  static const int kSpecularColorFieldNumber = 12;
  const ::std::string& specular_color() const;
  void set_specular_color(const ::std::string& value);
  void set_specular_color(const char* value);
  void set_specular_color(const void* value, size_t size);
  ::std::string* mutable_specular_color();
  ::std::string* release_specular_color();
  void set_allocated_specular_color(::std::string* specular_color);

  // optional bytes diffuse_map = 14;
  void clear_diffuse_map();
  static const int kDiffuseMapFieldNumber = 14;
  const ::std::string& diffuse_map() const;
  void set_diffuse_map(const ::std::string& value);
  void set_diffuse_map(const char* value);
  void set_diffuse_map(const void* value, size_t size);
  ::std::string* mutable_diffuse_map();
  ::std::string* release_diffuse_map();
  void set_allocated_diffuse_map(::std::string* diffuse_map);

  // optional bytes normal_map = 15;
  void clear_normal_map();
  static const int kNormalMapFieldNumber = 15;
  const ::std::string& normal_map() const;
  void set_normal_map(const ::std::string& value);
  void set_normal_map(const char* value);
  void set_normal_map(const void* value, size_t size);
  ::std::string* mutable_normal_map();
  ::std::string* release_normal_map();
  void set_allocated_normal_map(::std::string* normal_map);

  // optional string name = 17;
  void clear_name();
  static const int kNameFieldNumber = 17;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protos.Mesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr indices_;
  ::google::protobuf::internal::ArenaStringPtr positions_;
  ::google::protobuf::internal::ArenaStringPtr normals_;
  ::google::protobuf::internal::ArenaStringPtr tangents_;
  ::google::protobuf::internal::ArenaStringPtr bitangents_;
  ::google::protobuf::internal::ArenaStringPtr tcoords_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  ::google::protobuf::internal::ArenaStringPtr ambient_color_;
  ::google::protobuf::internal::ArenaStringPtr diffuse_color_;
  ::google::protobuf::internal::ArenaStringPtr specular_color_;
  ::google::protobuf::internal::ArenaStringPtr diffuse_map_;
  ::google::protobuf::internal::ArenaStringPtr normal_map_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Mesh* default_instance_;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  void Swap(Model* other);

  // implements Message ----------------------------------------------

  inline Model* New() const { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protos.Mesh meshes = 1;
  int meshes_size() const;
  void clear_meshes();
  static const int kMeshesFieldNumber = 1;
  const ::protos::Mesh& meshes(int index) const;
  ::protos::Mesh* mutable_meshes(int index);
  ::protos::Mesh* add_meshes();
  ::google::protobuf::RepeatedPtrField< ::protos::Mesh >*
      mutable_meshes();
  const ::google::protobuf::RepeatedPtrField< ::protos::Mesh >&
      meshes() const;

  // @@protoc_insertion_point(class_scope:protos.Model)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protos::Mesh > meshes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Model* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// optional bytes indices = 1;
inline void Mesh::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::indices() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.indices)
}
inline void Mesh::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.indices)
}
inline void Mesh::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.indices)
}
inline ::std::string* Mesh::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_indices() {
  // @@protoc_insertion_point(field_release:protos.Mesh.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.indices)
}

// optional bytes positions = 2;
inline void Mesh::clear_positions() {
  positions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::positions() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.positions)
  return positions_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_positions(const ::std::string& value) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.positions)
}
inline void Mesh::set_positions(const char* value) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.positions)
}
inline void Mesh::set_positions(const void* value, size_t size) {
  
  positions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.positions)
}
inline ::std::string* Mesh::mutable_positions() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.positions)
  return positions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_positions() {
  // @@protoc_insertion_point(field_release:protos.Mesh.positions)
  
  return positions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_positions(::std::string* positions) {
  if (positions != NULL) {
    
  } else {
    
  }
  positions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positions);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.positions)
}

// optional bytes normals = 3;
inline void Mesh::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::normals() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.normals)
}
inline void Mesh::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.normals)
}
inline void Mesh::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.normals)
}
inline ::std::string* Mesh::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_normals() {
  // @@protoc_insertion_point(field_release:protos.Mesh.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.normals)
}

// optional bytes tangents = 4;
inline void Mesh::clear_tangents() {
  tangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::tangents() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.tangents)
  return tangents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_tangents(const ::std::string& value) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.tangents)
}
inline void Mesh::set_tangents(const char* value) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.tangents)
}
inline void Mesh::set_tangents(const void* value, size_t size) {
  
  tangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.tangents)
}
inline ::std::string* Mesh::mutable_tangents() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.tangents)
  return tangents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_tangents() {
  // @@protoc_insertion_point(field_release:protos.Mesh.tangents)
  
  return tangents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_tangents(::std::string* tangents) {
  if (tangents != NULL) {
    
  } else {
    
  }
  tangents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tangents);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.tangents)
}

// optional bytes bitangents = 5;
inline void Mesh::clear_bitangents() {
  bitangents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::bitangents() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.bitangents)
  return bitangents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_bitangents(const ::std::string& value) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.bitangents)
}
inline void Mesh::set_bitangents(const char* value) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.bitangents)
}
inline void Mesh::set_bitangents(const void* value, size_t size) {
  
  bitangents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.bitangents)
}
inline ::std::string* Mesh::mutable_bitangents() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.bitangents)
  return bitangents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_bitangents() {
  // @@protoc_insertion_point(field_release:protos.Mesh.bitangents)
  
  return bitangents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_bitangents(::std::string* bitangents) {
  if (bitangents != NULL) {
    
  } else {
    
  }
  bitangents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitangents);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.bitangents)
}

// optional bytes tcoords = 6;
inline void Mesh::clear_tcoords() {
  tcoords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::tcoords() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.tcoords)
  return tcoords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_tcoords(const ::std::string& value) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.tcoords)
}
inline void Mesh::set_tcoords(const char* value) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.tcoords)
}
inline void Mesh::set_tcoords(const void* value, size_t size) {
  
  tcoords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.tcoords)
}
inline ::std::string* Mesh::mutable_tcoords() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.tcoords)
  return tcoords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_tcoords() {
  // @@protoc_insertion_point(field_release:protos.Mesh.tcoords)
  
  return tcoords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_tcoords(::std::string* tcoords) {
  if (tcoords != NULL) {
    
  } else {
    
  }
  tcoords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcoords);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.tcoords)
}

// optional string material = 9;
inline void Mesh::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::material() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.material)
  return material_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_material(const ::std::string& value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.material)
}
inline void Mesh::set_material(const char* value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.material)
}
inline void Mesh::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.material)
}
inline ::std::string* Mesh::mutable_material() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_material() {
  // @@protoc_insertion_point(field_release:protos.Mesh.material)
  
  return material_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.material)
}

// optional bytes ambient_color = 10;
inline void Mesh::clear_ambient_color() {
  ambient_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::ambient_color() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.ambient_color)
  return ambient_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_ambient_color(const ::std::string& value) {
  
  ambient_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.ambient_color)
}
inline void Mesh::set_ambient_color(const char* value) {
  
  ambient_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.ambient_color)
}
inline void Mesh::set_ambient_color(const void* value, size_t size) {
  
  ambient_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.ambient_color)
}
inline ::std::string* Mesh::mutable_ambient_color() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.ambient_color)
  return ambient_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_ambient_color() {
  // @@protoc_insertion_point(field_release:protos.Mesh.ambient_color)
  
  return ambient_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_ambient_color(::std::string* ambient_color) {
  if (ambient_color != NULL) {
    
  } else {
    
  }
  ambient_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ambient_color);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.ambient_color)
}

// optional bytes diffuse_color = 11;
inline void Mesh::clear_diffuse_color() {
  diffuse_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::diffuse_color() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.diffuse_color)
  return diffuse_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_diffuse_color(const ::std::string& value) {
  
  diffuse_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.diffuse_color)
}
inline void Mesh::set_diffuse_color(const char* value) {
  
  diffuse_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.diffuse_color)
}
inline void Mesh::set_diffuse_color(const void* value, size_t size) {
  
  diffuse_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.diffuse_color)
}
inline ::std::string* Mesh::mutable_diffuse_color() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.diffuse_color)
  return diffuse_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_diffuse_color() {
  // @@protoc_insertion_point(field_release:protos.Mesh.diffuse_color)
  
  return diffuse_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_diffuse_color(::std::string* diffuse_color) {
  if (diffuse_color != NULL) {
    
  } else {
    
  }
  diffuse_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffuse_color);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.diffuse_color)
}

// optional bytes specular_color = 12;
inline void Mesh::clear_specular_color() {
  specular_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::specular_color() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.specular_color)
  return specular_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_specular_color(const ::std::string& value) {
  
  specular_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.specular_color)
}
inline void Mesh::set_specular_color(const char* value) {
  
  specular_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.specular_color)
}
inline void Mesh::set_specular_color(const void* value, size_t size) {
  
  specular_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.specular_color)
}
inline ::std::string* Mesh::mutable_specular_color() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.specular_color)
  return specular_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_specular_color() {
  // @@protoc_insertion_point(field_release:protos.Mesh.specular_color)
  
  return specular_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_specular_color(::std::string* specular_color) {
  if (specular_color != NULL) {
    
  } else {
    
  }
  specular_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), specular_color);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.specular_color)
}

// optional bytes diffuse_map = 14;
inline void Mesh::clear_diffuse_map() {
  diffuse_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::diffuse_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.diffuse_map)
  return diffuse_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_diffuse_map(const ::std::string& value) {
  
  diffuse_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.diffuse_map)
}
inline void Mesh::set_diffuse_map(const char* value) {
  
  diffuse_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.diffuse_map)
}
inline void Mesh::set_diffuse_map(const void* value, size_t size) {
  
  diffuse_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.diffuse_map)
}
inline ::std::string* Mesh::mutable_diffuse_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.diffuse_map)
  return diffuse_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_diffuse_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.diffuse_map)
  
  return diffuse_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_diffuse_map(::std::string* diffuse_map) {
  if (diffuse_map != NULL) {
    
  } else {
    
  }
  diffuse_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffuse_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.diffuse_map)
}

// optional bytes normal_map = 15;
inline void Mesh::clear_normal_map() {
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::normal_map() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.normal_map)
  return normal_map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_normal_map(const ::std::string& value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.normal_map)
}
inline void Mesh::set_normal_map(const char* value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.normal_map)
}
inline void Mesh::set_normal_map(const void* value, size_t size) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.normal_map)
}
inline ::std::string* Mesh::mutable_normal_map() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.normal_map)
  return normal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_normal_map() {
  // @@protoc_insertion_point(field_release:protos.Mesh.normal_map)
  
  return normal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_normal_map(::std::string* normal_map) {
  if (normal_map != NULL) {
    
  } else {
    
  }
  normal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_map);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.normal_map)
}

// optional string name = 17;
inline void Mesh::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mesh::name() const {
  // @@protoc_insertion_point(field_get:protos.Mesh.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.Mesh.name)
}
inline void Mesh::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Mesh.name)
}
inline void Mesh::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Mesh.name)
}
inline ::std::string* Mesh::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.Mesh.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mesh::release_name() {
  // @@protoc_insertion_point(field_release:protos.Mesh.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.Mesh.name)
}

// -------------------------------------------------------------------

// Model

// repeated .protos.Mesh meshes = 1;
inline int Model::meshes_size() const {
  return meshes_.size();
}
inline void Model::clear_meshes() {
  meshes_.Clear();
}
inline const ::protos::Mesh& Model::meshes(int index) const {
  // @@protoc_insertion_point(field_get:protos.Model.meshes)
  return meshes_.Get(index);
}
inline ::protos::Mesh* Model::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Model.meshes)
  return meshes_.Mutable(index);
}
inline ::protos::Mesh* Model::add_meshes() {
  // @@protoc_insertion_point(field_add:protos.Model.meshes)
  return meshes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Mesh >*
Model::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:protos.Model.meshes)
  return &meshes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Mesh >&
Model::meshes() const {
  // @@protoc_insertion_point(field_list:protos.Model.meshes)
  return meshes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
